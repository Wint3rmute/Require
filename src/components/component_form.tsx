/**
 * Component Creation Form
 * 
 * Provides UI for:
 * - Creating new components in a project
 * - Adding interfaces to components
 * - Setting component properties
 */

'use client';

import React, { useState } from 'react';
import {
  Box,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Chip,
  IconButton,
  Paper,
  Divider,
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';
import { useInterfaces } from '@/lib/storage';
import { Component, ComponentType, InterfacePosition } from '@/lib/models';

interface ComponentInterfaceInput {
  id: string;
  interfaceDefinitionId: string;
  name: string;
  position: InterfacePosition;
}

interface ComponentFormProps {
  onSubmit: (componentData: Omit<Component, 'id'>) => void;
  onCancel?: () => void;
  defaultPosition?: { x: number; y: number };
}

export default function ComponentForm({ onSubmit, onCancel, defaultPosition }: ComponentFormProps) {
  const [interfaces] = useInterfaces();
  
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [type, setType] = useState<ComponentType>('component');
  const [componentInterfaces, setComponentInterfaces] = useState<ComponentInterfaceInput[]>([]);

  const addInterface = () => {
    const newInterface: ComponentInterfaceInput = {
      id: `temp-${Date.now()}`,
      interfaceDefinitionId: interfaces[0]?.id || '',
      name: `Interface ${componentInterfaces.length + 1}`,
      position: 'right'
    };
    setComponentInterfaces([...componentInterfaces, newInterface]);
  };

  const updateInterface = (index: number, field: keyof ComponentInterfaceInput, value: string) => {
    const updated = [...componentInterfaces];
    updated[index] = { ...updated[index], [field]: value } as ComponentInterfaceInput;
    setComponentInterfaces(updated);
  };

  const removeInterface = (index: number) => {
    setComponentInterfaces(componentInterfaces.filter((_, i) => i !== index));
  };

  const handleSubmit = () => {
    if (!name.trim()) return;

    const componentData: Omit<Component, 'id'> = {
      name: name.trim(),
      type,
      position: defaultPosition || { x: 100, y: 100 },
      interfaces: componentInterfaces.map(iface => ({
        id: '', // Will be generated by the storage layer
        componentId: '', // Will be set by the storage layer
        interfaceDefinitionId: iface.interfaceDefinitionId,
        name: iface.name,
        position: iface.position,
        isConnected: false
      }))
    };

    // Add description only if it's not empty
    if (description.trim()) {
      componentData.description = description.trim();
    }

    onSubmit(componentData);
    
    // Reset form
    setName('');
    setDescription('');
    setType('component');
    setComponentInterfaces([]);
  };

  const getInterfaceName = (interfaceId: string) => {
    return interfaces.find(i => i.id === interfaceId)?.name || 'Unknown';
  };

  return (
    <Paper sx={{ p: 3, maxWidth: 600, mx: 'auto' }}>
      <Typography variant="h6" gutterBottom>
        Create Component
      </Typography>

      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
        {/* Basic Information */}
        <TextField
          label="Component Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          fullWidth
          required
        />

        <TextField
          label="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          fullWidth
          multiline
          rows={2}
        />

        <FormControl fullWidth>
          <InputLabel>Component Type</InputLabel>
          <Select
            value={type}
            label="Component Type"
            onChange={(e) => setType(e.target.value as ComponentType)}
          >
            <MenuItem value="component">Component</MenuItem>
            <MenuItem value="subsystem">Subsystem</MenuItem>
            <MenuItem value="system">System</MenuItem>
          </Select>
        </FormControl>

        <Divider />

        {/* Interfaces Section */}
        <Box>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6">
              Interfaces ({componentInterfaces.length})
            </Typography>
            <Button
              startIcon={<AddIcon />}
              onClick={addInterface}
              disabled={interfaces.length === 0}
            >
              Add Interface
            </Button>
          </Box>

          {interfaces.length === 0 && (
            <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
              No interface definitions available. Create interfaces first.
            </Typography>
          )}

          {componentInterfaces.map((iface, index) => (
            <Paper key={iface.id} sx={{ p: 2, mb: 2, bgcolor: 'grey.50' }}>
              <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}>
                <TextField
                  label="Interface Name"
                  value={iface.name}
                  onChange={(e) => updateInterface(index, 'name', e.target.value)}
                  size="small"
                  sx={{ flex: 1 }}
                />

                <FormControl size="small" sx={{ minWidth: 120 }}>
                  <InputLabel>Type</InputLabel>
                  <Select
                    value={iface.interfaceDefinitionId}
                    label="Type"
                    onChange={(e) => updateInterface(index, 'interfaceDefinitionId', e.target.value)}
                  >
                    {interfaces.map((interfaceOption) => (
                      <MenuItem key={interfaceOption.id} value={interfaceOption.id}>
                        {interfaceOption.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>

                <FormControl size="small" sx={{ minWidth: 100 }}>
                  <InputLabel>Position</InputLabel>
                  <Select
                    value={iface.position}
                    label="Position"
                    onChange={(e) => updateInterface(index, 'position', e.target.value)}
                  >
                    <MenuItem value="left">Left</MenuItem>
                    <MenuItem value="right">Right</MenuItem>
                    <MenuItem value="top">Top</MenuItem>
                    <MenuItem value="bottom">Bottom</MenuItem>
                  </Select>
                </FormControl>

                <IconButton
                  onClick={() => removeInterface(index)}
                  color="error"
                  size="small"
                >
                  <DeleteIcon />
                </IconButton>
              </Box>

              <Box sx={{ mt: 1 }}>
                <Chip
                  label={getInterfaceName(iface.interfaceDefinitionId)}
                  size="small"
                  color="primary"
                  variant="outlined"
                />
              </Box>
            </Paper>
          ))}
        </Box>

        {/* Actions */}
        <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
          {onCancel && (
            <Button onClick={onCancel}>
              Cancel
            </Button>
          )}
          <Button
            variant="contained"
            onClick={handleSubmit}
            disabled={!name.trim()}
          >
            Create Component
          </Button>
        </Box>
      </Box>
    </Paper>
  );
}
